-- OPEN SOURCE ESP SCRIPT CREATED BY 4LAYY
-- HAS BOX ESP, CHAMS, AND TRACERS
-- WILL UPDATE WITH MORE FEATURES LIKE HEALTH BAR, SKELETON, ETC

-- SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- VARIABLES
local boxes = {}
local highlights = {}
local beamTracers = {}

local boxESPEnabled = false
local chamsEnabled = false
local tracerEnabled = false

local boxConnection
local chamsUpdateConnection
local tracerConnection

-- HELPER FUNC

local function getPlayerColor(plr)
    local teamColor = (plr.Team and plr.Team.TeamColor.Color) or Color3.fromRGB(0, 255, 0)
    if teamColor == Color3.new(1, 1, 1) then
        teamColor = Color3.fromRGB(0, 255, 0)
    end
    return teamColor
end

local function createBox()
    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = Color3.fromRGB(0, 255, 0)
    box.Thickness = 2
    box.Transparency = 1
    box.Filled = false
    return box
end

local function addHighlight(plr)
    if highlights[plr] then return end
    if not plr.Character or not plr.Character.Parent then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.Adornee = plr.Character
    highlight.FillColor = getPlayerColor(plr)
    highlight.OutlineColor = Color3.new(0, 0, 0)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = player:FindFirstChildOfClass("PlayerGui") or CoreGui
    highlights[plr] = highlight
end

local function removeHighlight(plr)
    if highlights[plr] then
        highlights[plr]:Destroy()
        highlights[plr] = nil
    end
end

-- CREATE BEAM TRACER
local function createBeam(plr)
    -- Clean old beam data if exists
    if beamTracers[plr] then
        local oldData = beamTracers[plr]
        if oldData.Beam then
            oldData.Beam.Enabled = false
            oldData.Beam:Destroy()
        end
        if oldData.Attachment0 then oldData.Attachment0:Destroy() end
        if oldData.Attachment1 then oldData.Attachment1:Destroy() end
        beamTracers[plr] = nil
    end

    local character = plr.Character
    if not character then return nil end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local localHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp or not localHRP then return nil end

    local beamData = {}

    local att0 = Instance.new("Attachment")
    att0.Name = "ESPAttachment0"
    att0.Parent = localHRP

    local att1 = Instance.new("Attachment")
    att1.Name = "ESPAttachment1"
    att1.Parent = hrp

    local beam = Instance.new("Beam")
    beam.Name = "ESPBeam"
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.FaceCamera = true
    beam.Width0 = 0.05
    beam.Width1 = 0.05
    beam.Color = ColorSequence.new(getPlayerColor(plr))
    beam.Transparency = NumberSequence.new(0)
    beam.Enabled = false
    beam.Parent = workspace

    beamData.Attachment0 = att0
    beamData.Attachment1 = att1
    beamData.Beam = beam

    beamTracers[plr] = beamData
    return beamData
end

-- UPDATES FOR ESP

local function updateBoxes()
    for _, plr in pairs(Players:GetPlayers()) do
        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr ~= player then
            local hrp = plr.Character.HumanoidRootPart
            local box = boxes[plr]
            if not box then
                box = createBox()
                boxes[plr] = box
            end

            box.Color = getPlayerColor(plr)

            local rootPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
            local distance = math.clamp(rootPos.Z, 0.1, 1000)

            if onScreen then
                local sizeY = (1500 / distance) * 1.3 -- taller
                local sizeX = sizeY * 1.0             -- less wide

                box.Size = Vector2.new(sizeX, sizeY)
                box.Position = Vector2.new(rootPos.X - sizeX / 2, rootPos.Y - sizeY / 2)
                box.Visible = true

                local velocity = hrp.Velocity
                local speed = velocity.Magnitude
                if speed > 1 then
                    box.Thickness = 2 + math.clamp(speed / 50, 0, 3)
                else
                    box.Thickness = 2
                end
            else
                box.Visible = false
            end
        else
            if boxes[plr] then
                boxes[plr].Visible = false
                boxes[plr] = nil -- remove so it doesnâ€™t linger
            end
        end
    end
end

local function updateAllHighlights()
    for plr, highlight in pairs(highlights) do
        if plr.Character and plr.Character.Parent then
            highlight.Adornee = plr.Character
            highlight.FillColor = getPlayerColor(plr)
        else
            removeHighlight(plr)
        end
    end
end

local function updateTracers()
    local localHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not localHRP then
        for _, data in pairs(beamTracers) do
            if data.Beam then data.Beam.Enabled = false end
        end
        return
    end

    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local targetHRP = plr.Character.HumanoidRootPart

            local beamData = beamTracers[plr]
            if not beamData then
                beamData = createBeam(plr)
            end
            if not beamData then continue end

            beamData.Attachment0.WorldPosition = localHRP.Position
            beamData.Attachment1.WorldPosition = targetHRP.Position

            beamData.Beam.Color = ColorSequence.new(getPlayerColor(plr))
            beamData.Beam.Enabled = true
        else
            if beamTracers[plr] and beamTracers[plr].Beam then
                beamTracers[plr].Beam.Enabled = false
            end
        end
    end
end

-- GUI SETUP

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ESP_UI_4layy"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Size = UDim2.new(0, 250, 0, 220)
MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0) -- CENTERED on screen
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.ClipsDescendants = true
MainFrame.Active = true
MainFrame.Draggable = true

local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Parent = MainFrame
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Size = UDim2.new(1, 0, 0, 28)

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = TopBar
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(1, -40, 1, 0)
Title.Position = UDim2.new(0, 15, 0, 0)
Title.Font = Enum.Font.SourceSansBold
Title.Text = "4layy's ESP UI"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 18
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.RichText = false

local MinimizeBtn = Instance.new("TextButton")
MinimizeBtn.Name = "MinimizeBtn"
MinimizeBtn.Parent = TopBar
MinimizeBtn.Size = UDim2.new(0, 30, 1, 0)
MinimizeBtn.Position = UDim2.new(1, -30, 0, 0)
MinimizeBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MinimizeBtn.BorderSizePixel = 0
MinimizeBtn.Font = Enum.Font.SourceSansBold
MinimizeBtn.Text = "-"
MinimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeBtn.TextSize = 22

local ScrollFrame = Instance.new("ScrollingFrame")
ScrollFrame.Name = "ScrollFrame"
ScrollFrame.Parent = MainFrame
ScrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ScrollFrame.BorderSizePixel = 0
ScrollFrame.Position = UDim2.new(0, 10, 0, 35)
ScrollFrame.Size = UDim2.new(1, -20, 1, -45)
ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 160)
ScrollFrame.ScrollBarThickness = 4
ScrollFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar

-- BUTTONS
local function createButton(text)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, 35) -- Full width minus padding
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    btn.BorderSizePixel = 0
    btn.Font = Enum.Font.SourceSansBold
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextSize = 16
    btn.Text = text
    btn.AutoButtonColor = true
    btn.Parent = ScrollFrame
    return btn
end

local BoxToggle = createButton("Toggle Box ESP")
BoxToggle.Position = UDim2.new(0, 0, 0, 0)

local ChamsToggle = createButton("Toggle Chams")
ChamsToggle.Position = UDim2.new(0, 0, 0, 40)

local TracerToggle = createButton("Toggle Tracers")
TracerToggle.Position = UDim2.new(0, 0, 0, 80)

-- BUTTON FUNCTIONS
BoxToggle.MouseButton1Click:Connect(function()
    boxESPEnabled = not boxESPEnabled
    if not boxESPEnabled then
        for _, box in pairs(boxes) do
            box.Visible = false
        end
        boxes = {}
    end
end)

ChamsToggle.MouseButton1Click:Connect(function()
    chamsEnabled = not chamsEnabled
    if chamsEnabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                addHighlight(plr)
            end
        end
    else
        for plr, highlight in pairs(highlights) do
            highlight:Destroy()
        end
        highlights = {}
    end
end)

TracerToggle.MouseButton1Click:Connect(function()
    tracerEnabled = not tracerEnabled
    if not tracerEnabled then
        for plr, data in pairs(beamTracers) do
            if data.Beam then
                data.Beam.Enabled = false
                data.Beam:Destroy()
            end
            if data.Attachment0 then data.Attachment0:Destroy() end
            if data.Attachment1 then data.Attachment1:Destroy() end
        end
        beamTracers = {}
    else
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                createBeam(plr)
            end
        end
    end
end)

-- MINIMIZE LOGIC
local minimized = false
MinimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    ScrollFrame.Visible = not minimized
    MainFrame.Size = minimized and UDim2.new(0, 250, 0, 28) or UDim2.new(0, 250, 0, 220)
end)

-- CREATE BEAMS ON RESPAWN
player.CharacterAdded:Connect(function()
    wait(0.5)
    if tracerEnabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                createBeam(plr)
            end
        end
    end
end)

-- RECREATE BEAMS AND HIGHLIGHTS
Players.PlayerAdded:Connect(function(plr)
    if plr == player then return end
    plr.CharacterAdded:Connect(function()
        wait(0.5)
        if tracerEnabled then
            createBeam(plr)
        end
        if chamsEnabled then
            addHighlight(plr)
        end
    end)
end)

-- FOR PLAYERS IN GAME ALREADY
for _, plr in pairs(Players:GetPlayers()) do
    if plr ~= player then
        plr.CharacterAdded:Connect(function()
            wait(0.5)
            if tracerEnabled then
                createBeam(plr)
            end
            if chamsEnabled then
                addHighlight(plr)
            end
        end)
    end
end

-- LOOP UPDATE
boxConnection = RunService.RenderStepped:Connect(function()
    if boxESPEnabled then
        updateBoxes()
    else
        for _, box in pairs(boxes) do
            box.Visible = false
        end
    end
end)

chamsUpdateConnection = RunService.RenderStepped:Connect(function()
    if chamsEnabled then
        updateAllHighlights()
    end
end)

tracerConnection = RunService.RenderStepped:Connect(function()
    if tracerEnabled then
        updateTracers()
    else
        for _, data in pairs(beamTracers) do
            if data.Beam then
                data.Beam.Enabled = false
            end
        end
    end
end)
